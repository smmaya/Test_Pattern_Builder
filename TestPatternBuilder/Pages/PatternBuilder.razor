@page "/PatternBuilder"
@using TestPatternBuilder.Data

<div class="row mx-5">

<div class="col-12 text-center alert alert-warning pt-0" style="font-weight:bold">
    ~ <span style="color:darkred">JIRA</span> ~
    <hr class="p-0 m-0"/>
    <div class="d-flex">
        <div class="col me-2">
            <div>Issue reference:</div>
            <input class="form-control" @bind-value="IssueReference"/>
        </div>
        <div class="col me-2">
            <div>Astrato version:</div>
            <input class="form-control" @bind-value="AstratoVersion"/>
        </div>
        <div class="col">
            <div>Chart version:</div>
            <input class="form-control" @bind-value="ChartVersion"/>
        </div>
    </div>
</div>

<div class="col-12 text-center alert alert-secondary pt-0" style="font-weight:bold">
    ~ <span style="color:darkred">ZEPHYR SCALE</span> ~
    <hr class="p-0 m-0"/>
    <div class="d-flex">
        <div class="col me-2">
            <div>Regression Test Cycle:</div>
            <input class="form-control" @bind-value="RegressionTestCycle"/>
        </div>
        <div class="col me-2">
            <div>Acceptance Test Cycle:</div>
            <input class="form-control" @bind-value="AcceptanceTestCycle"/>
        </div>
        <div class="col">
            <div>Sanity Test Cycle:</div>
            <input class="form-control" @bind-value="SanityTestCycle"/>
        </div>
    </div>
</div>

<div class="col-12 text-center alert alert-info pt-0" style="font-weight:bold">
    ~ <span style="color:darkred">Devtools</span> ~
    <hr class="p-0 m-0"/>
    <div class="d-flex">
        <div class="col me-2">
            <div>repoSha:</div>
            <input class="form-control" @bind-value="RepoSha"/>
        </div>
        <div class="col me-2">
            <div>repoTag:</div>
            <input class="form-control" @bind-value="RepoTag"/>
        </div>
        <div class="col">
            <div>x-correlation:</div>
            <input class="form-control" @bind-value="XCorrelation"/>
        </div>
    </div>
</div>

<div class="col mb-3" style="color:grey; font-size:x-small">
    <div>Methods: (<label>@_methodsLength</label>)</div>
    <select class="form-select" style="font-size:small" @onchange="SelectedMethodsChanged" multiple size="@_datasourcesLength">
        @foreach (var method in Enum.GetValues<Methods>())
        {
            if (method.GetDisplayName() == "Issue Related")
            {
                <option class="ms-1">@method.GetDisplayName()</option>
            }
            else
            {
                <option class="ms-1">@method</option>
            }
        }
    </select>

    <div class="row mx-1">
        <span class="text-center mb-1" style="color:grey; font-size:x-small">select 1 option</span>
        <button class="btn btn-secondary" style="font-size:small" @onclick="AddMethods">Add method</button>
    </div>
    <ol class="mt-2">
        @if (SelectedMethods != null)
        {
            @foreach (var method in ListOfMethods!)
            {
                <li>@method</li>
            }
        }
    </ol>
</div>

<div class="col" style="color:grey; font-size:x-small">
    <div>Components: (<label>@_componentsLength</label>)</div>
    <select class="form-select" style="font-size:small" @onchange="SelectedComponentsChanged" multiple size="@_datasourcesLength">
        @foreach (var compo in Enum.GetValues<Components>())
        {
            if (compo.GetDisplayName() == "Middle Layer" || compo.GetDisplayName() == "UX/UI")
            {
                <option class="ms-1">@compo.GetDisplayName()</option>
            }
            else
            {
                <option class="ms-1">@compo</option>
            }
        }
    </select>
    <div class="row mx-1">
        <span class="text-center mb-1" style="color:grey; font-size:x-small">select 1 option</span>
        <button class="btn btn-secondary" style="font-size:small" @onclick="AddComponents">Add component</button>
    </div>
    <ol class="mt-2">
        @if (SelectedComponents != null)
        {
            @foreach (var compo in ListOfComponents!)
            {
                <li>@compo</li>
            }
        }
    </ol>
</div>

<div class="col" style="color:grey; font-size:x-small">
    <div>Environments: (<label>@_environmentsLength</label>)</div>
    <select class="form-select" style="font-size:small" @onchange="SelectedEnvironmentsChanged" multiple size="@_datasourcesLength">
        @foreach (var env in Enum.GetValues<Environments>())
        {
            <option class="ms-1">@env</option>
        }
    </select>
    <div class="row mx-1">
        <span class="text-center mb-1" style="color:grey; font-size:x-small">select 1 option</span>
        <button class="btn btn-secondary" style="font-size:small" @onclick="AddEnvironments">Add environment</button>
    </div>
    <ol class="mt-2">
        @if (SelectedEnvironments != null)
        {
            @foreach (var env in ListOfEnvironments!)
            {
                <li>@env</li>
            }
        }
    </ol>
</div>

<div class="col" style="color:grey; font-size:x-small">
    <div>Browsers: (<label>@_browsersLength</label>)</div>
    <select class="form-select" style="font-size:small" @onchange="SelectedBrowsersChanged" multiple size="@_datasourcesLength">
        @foreach (var browsers in Enum.GetValues<Browsers>())
        {
            <option class="ms-1">@browsers</option>
        }
    </select>
    <div class="row mx-1">
        <span class="text-center mb-1" style="color:grey; font-size:x-small">select many</span>
        <button class="btn btn-secondary" style="font-size:small" @onclick="AddBrowsers">Add browser(s)</button>
    </div>
    <ol class="mt-2">
        @if (SelectedBrowsers != null)
        {
            @foreach (var browser in ListOfBrowsers!)
            {
                <li>@browser</li>
            }
        }
    </ol>
</div>

<div class="col" style="color:grey; font-size:x-small">
    <div>Types: (<label>@_typesLength</label>)</div>
    <select class="form-select" style="font-size:small" @onchange="SelectedTypesChanged" multiple size="@_datasourcesLength">
        @foreach (var type in Enum.GetValues<Types>())
        {
            if (@type.GetDisplayName() == "Date" || @type.GetDisplayName() == "Date (Timestamp)" || @type.GetDisplayName() == "Float/Decimal")
            {
                <option class="ms-1">@type.GetDisplayName()</option>
            }
            else
            {
                <option class="ms-1">@type</option>
            }
        }
    </select>
    <div class="row mx-1">
        <span class="text-center mb-1" style="color:grey; font-size:x-small">select many</span>
        <button class="btn btn-secondary" style="font-size:small" @onclick="AddTypes">Add type(s)</button>
    </div>
    <ol class="mt-2">
        @if (SelectedTypes != null)
        {
            @foreach (var type in ListOfTypes!)
            {
                <li>@type</li>
            }
        }
    </ol>
</div>

<div class="col" style="color:grey; font-size:x-small">
    <div>Datasources: (<label>@_datasourcesLength</label>)</div>
    <select class="form-select" style="font-size:small" @onchange="SelectedDatasourcesChanged" multiple size="@_datasourcesLength">
        @foreach (var source in Enum.GetValues<Datasources>())
        {
            if (@source.GetDisplayName() == "Google Sheets" || @source.GetDisplayName() == "Google BigQuery")
            {
                <option class="ms-1">@source.GetDisplayName()</option>
            }
            else
            {
                <option class="ms-1">@source</option>
            }
        }
    </select>
    <div class="row mx-1">
        <span class="text-center mb-1" style="color:grey; font-size:x-small">select 1 option</span>
        <button class="btn btn-secondary" style="font-size:small" @onclick="AddDatasources">Add datasource(s)</button>
    </div>
    <ol class="mt-2">
        @if (SelectedDatasources != null)
        {
            @foreach (var source in ListOfDatasources!)
            {
                <li>@source</li>
            }
        }
    </ol>
</div>

<div class="card-title">Possibly affected features, check the ones you tested:</div>
<div class="card mb-3">
    <div class="col pt-1">
        @for (int i = 0; i < Enum.GetValues<InternalDependencies>().Length; i += 3)
        {
            <div class="d-flex">
                @for (int j = i; j < i + 3 && j < Enum.GetValues<InternalDependencies>().Length; j++)
                {
                    var dep = Enum.GetValues<InternalDependencies>()[j];
                    <div class="col-4">
                        <div class="form-check">
                            <input class="form-check-input mx-0" type="checkbox" id="deps@(j)" value="@(IsSelected(dep))" @onchange="() => AddToDependencies(dep)"/>
                            <label class="form-check-label ms-2" for="deps@(j)">@dep.GetDisplayName()</label>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

<div class="d-flex mb-3">

    <div class="d-flex flex-fill me-4">
        <div class="col flex-fill align-self-end">
            <div>Story/Task requirements list:</div>
            <input class="form-control lh-sm" @bind-value="Requirement"/>
        </div>
        <div class="col text-nowrap align-self-end">
            <button class="btn btn-secondary ms-2" style="font-size:small" @onclick="AddRequirement">Add requirement(s)</button>
        </div>
    </div>

    <div class="d-flex flex-fill ms-4">
        <div class="col-6 flex-fill align-self-end">
            <div>Out of scope list:</div>
            <input class="form-control lh-sm" @bind-value="OutOfScope"/>
        </div>
        <div class="col text-nowrap align-self-end">
            <button class="btn btn-secondary ms-2 align-middle" style="font-size:small" @onclick="AddOutOfScope">Add Out of scope(s)</button>
        </div>
    </div>

</div>

<div class="d-flex mb-3">

    <div class="d-flex flex-fill me-5">
        <div class="col-6 flex-fill">
            @foreach (var req in _requirements)
            {
                <table class="table table-sm mb-0">
                    <tbody>
                    <tr>
                        <td>@req.Description</td>
                        <td class="text-center" style="width:30px">
                            <span class="bi bi-trash" style="cursor:pointer; font-weight:bold; color:red" @onclick="@(() => { DeleteRequirement(req); })"></span>
                        </td>
                    </tr>
                    </tbody>
                </table>
            }
        </div>
    </div>

    <div class="d-flex flex-fill ms-0">
        <div class="col-6 flex-fill">
            @foreach (var scope in _outOfScopeItems)
            {
                <table class="table table-sm mb-0">
                    <tbody>
                    <tr>
                        <td>@scope.Description</td>
                        <td class="text-center" style="width:30px">
                            <span class="bi bi-trash" style="cursor:pointer; font-weight:bold; color:red" @onclick="@(() => { DeleteOutOfScope(scope); })"></span>
                        </td>
                    </tr>
                    </tbody>
                </table>
            }
        </div>
    </div>

</div>

<hr class="mb-0" style="color: black; height: 5px"/>

<section class="alert alert-light" id="testPattern">

    <table class="table table-bordered table-sm mb-3" style="table-layout: fixed">
        <tbody>
        <tr>
            <td>
                Tested on (
                <span style="font-weight:bold; color:darkred; text-decoration:underline">
                    @ListOfEnvironments!.FirstOrDefault()
                </span> ) <span style="font-weight:bold">@_dateString</span>
            </td>
            <td>
                Astrato version:
                <span style="font-weight:bold">
                    <span></span>@AstratoVersion
                </span>
            </td>
            <td>
                Charts version:
                <span style="font-weight:bold">
                    <span></span>@ChartVersion
                </span>
            </td>
        </tr>
        </tbody>
    </table>

    <table class="table table-bordered table-sm mb-3" style="table-layout: fixed">
        <tbody>
        <tr>
            <td>
                <span>Method: </span>
                @if (ListOfMethods != null)
                {
                    @switch (ListOfMethods.FirstOrDefault())
                    {
                        case "Issue Related":
                            <span style="font-weight:bold; color:darkred">@ListOfMethods?.FirstOrDefault() ( @IssueReference )</span>
                            break;
                        case "Regression":
                            <span style="font-weight:bold; color:darkred">@ListOfMethods?.FirstOrDefault() ( @RegressionTestCycle )</span>
                            break;
                        case "Acceptance":
                            <span style="font-weight:bold; color:darkred">@ListOfMethods?.FirstOrDefault() ( @AcceptanceTestCycle )</span>
                            break;
                        case "Sanity":
                            <span style="font-weight:bold; color:darkred">@ListOfMethods?.FirstOrDefault() ( @SanityTestCycle )</span>
                            break;
                        default:
                            <span style="font-weight:bold; color:darkred"> @ListOfMethods?.FirstOrDefault()</span>
                            break;
                    }
                }
            </td>
            <td>
                <span>Component: </span>
                @if (ListOfComponents != null)
                {
                    <span style="font-weight:bold; color:darkred">
                        @ListOfComponents.FirstOrDefault()
                    </span>
                }
            </td>
            <td>
                <span>Datasource: </span>
                @if (ListOfDatasources != null)
                {
                    <span style="font-weight:bold; color:darkred">
                        @ListOfDatasources.FirstOrDefault()
                    </span>
                }
            </td>
        </tr>
        </tbody>
    </table>

    <table class="table table-bordered table-sm mb-3">
        <thead>
        <tr>
            <td style="font-weight:bold;color:darkred">Browsers:</td>
            <td style="font-weight:bold">Data types:</td>
            <td></td>
        </tr>
        </thead>
        <tbody>
        @if (ListOfBrowsers!.Length == 1)
        {
            <tr style="border-top-width:medium; border-top-color:darkgrey">
                <td style="font-weight:bold">
                    <div class="d-flex align-items-center">
                        @switch (SelectedBrowsers)
                        {
                            case var _ when ListOfBrowsers.Contains("Chrome"):
                                <img src="/img/chrome-16.png" style="height:16px" alt="Chrome"/>
                                break;
                            case var _ when ListOfBrowsers.Contains("Edge"):
                                <img src="/img/edge-16.png" style="height:16px" alt="Edge"/>
                                break;
                            case var _ when ListOfBrowsers.Contains("Firefox"):
                                <img src="/img/firefox-16.png" style="height:15px" alt="Firefox"/>
                                break;
                            case var _ when ListOfBrowsers.Contains("Opera"):
                                <img src="/img/opera-16.png" style="height:16px" alt="Opera"/>
                                break;
                            case var _ when ListOfBrowsers.Contains("Safari"):
                                <img src="/img/safari-16.png" style="height:16px" alt="Safari"/>
                                break;
                            case var _ when ListOfBrowsers.Contains("Vivaldi"):
                                <img src="/img/vivaldi-16.png" style="height:16px" alt="Vivaldi"/>
                                break;
                        }
                        <div class="ms-2">@ListOfBrowsers.FirstOrDefault()</div>
                    </div>
                </td>
                <td></td>
                <td style="font-weight:bold; width:80px">Status:</td>
            </tr>
            @foreach (var types in ListOfTypes!)
            {
                <tr>
                    <td> </td>
                    <td>@types</td>
                    <td> </td>
                </tr>
            }
        }
        else
        {
            @foreach (var browser in ListOfBrowsers)
            {
                <tr style="border-top-width:medium; border-top-color:darkgrey">
                    <td style="font-weight:bold">
                        <div class="d-flex align-items-center">
                            @switch (browser)
                            {
                                case var _ when browser.Contains("Chrome"):
                                    <img src="/img/chrome-16.png" style="height:16px" alt="Chrome"/>
                                    break;
                                case var _ when browser.Contains("Edge"):
                                    <img src="/img/edge-16.png" style="height:16px" alt="Edge"/>
                                    break;
                                case var _ when browser.Contains("Firefox"):
                                    <img src="/img/firefox-16.png" style="height:15px" alt="Firefox"/>
                                    break;
                                case var _ when browser.Contains("Opera"):
                                    <img src="/img/opera-16.png" style="height:16px" alt="Opera"/>
                                    break;
                                case var _ when browser.Contains("Safari"):
                                    <img src="/img/safari-16.png" style="height:16px" alt="Safari"/>
                                    break;
                                case var _ when browser.Contains("Vivaldi"):
                                    <img src="/img/vivaldi-16.png" style="height:16px" alt="Vivaldi"/>
                                    break;
                            }
                            <div class="ms-2">@browser</div>
                        </div>
                    </td>
                    <td></td>
                    <td style="font-weight:bold; width:80px">Status:</td>
                </tr>
                @if (ListOfTypes!.Length == 1)
                {
                    <tr>
                        <td></td>
                        <td>@ListOfTypes.FirstOrDefault()</td>
                        <td></td>
                    </tr>
                }
                else
                {
                    @foreach (var types in ListOfTypes)
                    {
                        <tr>
                            <td></td>
                            <td>@types</td>
                            <td></td>
                        </tr>
                    }
                }
            }
        }
        </tbody>
    </table>

    @if (RepoSha != null || RepoTag != null || XCorrelation != null)
    {
        <table class="table table-bordered table-sm mb-3">
            <thead>
            <tr style="border-bottom-width:medium; border-bottom-color:darkgrey">
                <td style="font-weight:bold;color:darkred;width:30%">Tech Info:</td>
                <td></td>
            </tr>
            </thead>
            <tbody>
            <tr>
                <td>repoSha:</td>
                <td>@RepoSha</td>
            </tr>
            <tr>
                <td>repoTag:</td>
                <td>@RepoTag</td>
            </tr>
            <tr>
                <td>x-Correlation:</td>
                <td>@XCorrelation</td>
            </tr>
            </tbody>
        </table>
    }

    @if (Requirement != null)
    {
        <table class="table table-bordered table-sm mb-3">
            <thead>
            <tr style="border-bottom-width:medium; border-bottom-color:darkgrey">
                <td style="font-weight:bold;color:darkred">Story/Task Requirements:</td>
                <td style="font-weight: bold; width:80px">Status:</td>
            </tr>
            </thead>
            <tbody>
            @foreach (var test in _requirements)
            {
                <tr>
                    <td>@test.Description</td>
                    <td></td>
                </tr>
            }
            </tbody>
        </table>
    }

    @if (OutOfScope != null)
    {
        <table class="table table-bordered table-sm mb-3">
            <thead>
            <tr style="border-bottom-width:medium; border-bottom-color:darkgrey">
                <td style="font-weight:bold;color:darkred">Out of scope:</td>
            </tr>
            </thead>
            <tbody>
            @foreach (var scope in _outOfScopeItems)
            {
                <tr>
                    <td>@scope.Description</td>
                </tr>
            }
            </tbody>
        </table>
    }

    @if (_anyDependencySelected)
    {
        <table class="table table-bordered table-sm mb-0">
            <thead>
            <tr style="border-bottom-width:medium; border-bottom-color:darkgrey">
                <td style="font-weight:bold;color:darkred">Tested related features:</td>
                <td style="font-weight:bold; width:80px">Status:</td>
            </tr>
            </thead>
            <tbody>
            @foreach (var dep in Enum.GetValues<InternalDependencies>())
            {
                @if (dep != (_internalDependencies & dep))
                {
                    continue;
                }
                <tr>
                    <td>@dep.GetDisplayName()</td>
                    <td></td>
                </tr>
            }
            </tbody>
        </table>
    }

</section>

</div>

<div class="text-center mb-3">
    <button class="btn btn-secondary mb-3" onclick="CopyToClipboard('testPattern')">Copy to clipboard</button>
    <div>Now, paste it into your Jira comment. Thank you for using TPB.</div>
</div>

@code{
    readonly int _browsersLength = Enum.GetValues<Browsers>().Length;
    readonly int _methodsLength = Enum.GetValues<Methods>().Length;
    readonly int _environmentsLength = Enum.GetValues<Environments>().Length;
    readonly int _componentsLength = Enum.GetValues<Components>().Length;
    readonly int _typesLength = Enum.GetValues<Types>().Length;
    readonly int _datasourcesLength = Enum.GetValues<Datasources>().Length;

    static DateTime _actualDate;
    string? _dateString;

    private string? IssueReference { get; set; }
    private string? AstratoVersion { get; set; }
    private string? ChartVersion { get; set; }
    private string? RegressionTestCycle { get; set; }
    private string? AcceptanceTestCycle { get; set; }
    private string? SanityTestCycle { get; set; }
    private string? RepoSha { get; set; }
    private string? RepoTag { get; set; }
    private string? XCorrelation { get; set; }

    // private Methods SelectedMethod { get; set; }
    private string[]? SelectedBrowsers { get; set; } = { };
    private string[]? SelectedMethods { get; set; } = { };
    private string[]? SelectedEnvironments { get; set; } = { };
    private string[]? SelectedComponents { get; set; } = { };
    private string[]? SelectedTypes { get; set; } = { };
    private string[]? SelectedDatasources { get; set; } = { };

    private string[]? ListOfBrowsers { get; set; } = { };
    private string[]? ListOfMethods { get; set; } = { };
    private string[]? ListOfEnvironments { get; set; } = { };
    private string[]? ListOfComponents { get; set; } = { };
    private string[]? ListOfTypes { get; set; } = { };
    private string[]? ListOfDatasources { get; set; } = { };

    public class Requirements
    {
        public string? Description { get; init; }
    }

    private string? Requirement { get; set; }
    private readonly List<Requirements> _requirements = new();

    private void AddRequirement()
    {
        if (string.IsNullOrEmpty(Requirement)) return;
        _requirements.Add(new Requirements { Description = Requirement });
        Requirement = string.Empty;
    }

    private void DeleteRequirement(Requirements requirement)
    {
        _requirements.RemoveAt(_requirements.ToList().FindIndex(e => e.Description == requirement.Description));
    }

    public class OutOfScopes
    {
        public string? Description { get; init; }
    }

    private string? OutOfScope { get; set; }
    private readonly List<OutOfScopes> _outOfScopeItems = new();

    private void AddOutOfScope()
    {
        if (string.IsNullOrEmpty(OutOfScope)) return;
        _outOfScopeItems.Add(new OutOfScopes { Description = OutOfScope });
        OutOfScope = string.Empty;
    }

    private void DeleteOutOfScope(OutOfScopes scope)
    {
        _outOfScopeItems.RemoveAt(_outOfScopeItems.ToList().FindIndex(e => e.Description == scope.Description));
    }

    private void SelectedBrowsersChanged(ChangeEventArgs e)
    {
        SelectedBrowsers = (string[]?)e.Value;
    }

    private void SelectedMethodsChanged(ChangeEventArgs e)
    {
        SelectedMethods = (string[]?)e.Value;
    }

    private void SelectedEnvironmentsChanged(ChangeEventArgs e)
    {
        SelectedEnvironments = (string[]?)e.Value;
    }

    private void SelectedComponentsChanged(ChangeEventArgs e)
    {
        SelectedComponents = (string[]?)e.Value;
    }

    private void SelectedTypesChanged(ChangeEventArgs e)
    {
        SelectedTypes = (string[]?)e.Value;
    }

    private void SelectedDatasourcesChanged(ChangeEventArgs e)
    {
        SelectedDatasources = (string[]?)e.Value;
    }

    private void AddBrowsers()
    {
        ListOfBrowsers = SelectedBrowsers;
    }

    private void AddMethods()
    {
        ListOfMethods = SelectedMethods;
    }

    private void AddEnvironments()
    {
        ListOfEnvironments = SelectedEnvironments;
        _actualDate = DateTime.Now;
        _dateString = _actualDate.ToString("dd-MM-yyyy, HH:mm");
    }

    private void AddComponents()
    {
        ListOfComponents = SelectedComponents;
    }

    private void AddTypes()
    {
        ListOfTypes = SelectedTypes;
    }

    private void AddDatasources()
    {
        ListOfDatasources = SelectedDatasources;
    }

    private InternalDependencies _internalDependencies;
    bool _anyDependencySelected = false;

    private bool IsSelected(InternalDependencies dep)
    {
        return (_internalDependencies & dep) == dep;
    }

    private Task AddToDependencies(InternalDependencies dep)
    {
        if ((_internalDependencies & dep) != dep)
            _internalDependencies = _internalDependencies | dep;
        else
            _internalDependencies &= ~dep;

        _anyDependencySelected = true;

        return Task.CompletedTask;
    }

}